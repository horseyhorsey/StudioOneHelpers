@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Web
@using StudioOneHelpers.Pages.Shared
@using StudioOneHelpers.Pages.Shared.Dialogs
@using StudioOneHelpers.Services
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject DatabaseProcessingService DatabaseService
@inject NavigationService NavigationService
@inject ILocalStorageService LocalStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1" Dense>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h6" Style="font-weight: 700; margin-bottom: 4px; color: palegreen;">
            🎵 Studio One Helpers
        </MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Help"
                       Color="Color.Inherit"
                       Size="Size.Small"
                       OnClick="ShowHelpDialog"
                       Style="color: rgba(255,255,255,0.8); margin-left: 8px;"
                       Title="Get help with Studio One Helpers" />
        <MudSpacer />        
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <CascadingValue Value="@NavigationService">
            <CascadingValue Value="Snackbar">
                <NavMenu />
            </CascadingValue>            
        </CascadingValue>
    </MudDrawer>

    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    private List<string> availableCategories = new();
    private string? commandsDataStatus;
    private string? pluginsDataStatus;
    private string? presetsDataStatus;

    protected override async Task OnInitializedAsync()
    {
        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        
        // Load available categories for the menu
        availableCategories = await DatabaseService.LoadAvailableCategoriesFromStorageAsync();
        
        // Check data status for navigation buttons
        await CheckDataStatus();
        
        // Listen for navigation changes to refresh categories
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Refresh categories when navigating to ensure menu is up to date
        availableCategories = await DatabaseService.LoadAvailableCategoriesFromStorageAsync();
        await CheckDataStatus();
        StateHasChanged();
    }

    private async Task CheckDataStatus()
    {
        // Check commands data
        var commandsData = await LocalStorage.GetItemAsync<string>("CommandsData");
        commandsDataStatus = !string.IsNullOrEmpty(commandsData) ? "Available" : null;

        // Check plugins data
        var pluginsData = await LocalStorage.GetItemAsync<string>("PluginsData");
        pluginsDataStatus = !string.IsNullOrEmpty(pluginsData) ? "Available" : null;

        // Check presets data
        presetsDataStatus = availableCategories.Any() ? "Available" : null;
    }

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;

    private void DarkModeToggle() => _isDarkMode = !_isDarkMode;

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    // Override to refresh categories when the layout is rendered
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Refresh categories on first render to ensure menu is up to date
            availableCategories = await DatabaseService.LoadAvailableCategoriesFromStorageAsync();
            StateHasChanged();
        }
    }

    private async Task ShowHelpDialog()
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = false
        };

        await DialogService.ShowAsync<DashboardHelpDialog>("", options);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}


