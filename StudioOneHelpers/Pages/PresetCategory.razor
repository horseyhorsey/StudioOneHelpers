@page "/presets/category/{CategoryName}"
@using Blazored.LocalStorage
@using StudioOneHelpers.Pages.Shared
@using StudioOneHelpers.Pages.Shared.Dialogs
@using StudioOneHelpers.Services
@using StudioOneHelpers.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject DatabaseProcessingService DatabaseService
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject MacroGenerationService MacroService
@inject PluginLookupService PluginLookupService

<PageTitle>@CategoryName Presets - S1 Helpers</PageTitle>

<MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.ExtraLarge" Style="height: calc(100vh - 80px);">
    <MudGrid Style="height: 100%;">
        <MudItem xs="12" Style="height: 100%;">
            <MudPaper Elevation="2" Class="pa-1" Style="height: 100%;">
                @if (isLoading)
                {
                    <MudStack AlignItems="AlignItems.Center" Style="height: 100%;">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                        <MudText Typo="Typo.h6" Class="mt-4">Loading @CategoryName presets...</MudText>
                    </MudStack>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudStack AlignItems="AlignItems.Center" Style="height: 100%;">
                        <MudAlert Severity="Severity.Error" Class="mb-4" Style="max-width: 500px;">
                            @errorMessage
                        </MudAlert>
                    </MudStack>
                }
                else
                {
                    <div style="display: flex; flex-direction: column; height: 100%;">
                        <!-- Header with search and controls -->
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4" Style="flex-shrink: 0;">
                            <MudText Typo="Typo.h5" Style="font-weight: bold;">@CategoryName Presets</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString" 
                                          Placeholder="Search presets..." 
                                          Adornment="Adornment.Start" 
                                          Immediate="true" 
                                          Clearable
                                          OnClearButtonClick="ClearFilters"
                                          AdornmentIcon="@Icons.Material.Filled.Search" 
                                          IconSize="Size.Medium" 
                                          OnKeyUp="OnSearchChanged"
                                          DebounceInterval="300"
                                          Style="min-width: 300px;" />
                            <MudTooltip Text="Export to PDF">
                                <MudButton OnClick="PrintPage" Size="Size.Small" StartIcon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Error" Variant="Variant.Filled">PDF</MudButton>
                            </MudTooltip>
                            <MudTooltip Text="View Help">
                                <MudButton OnClick="ShowHelp" Size="Size.Small" StartIcon="@Icons.Material.Filled.Help" Color="Color.Info" Variant="Variant.Outlined">Help</MudButton>
                            </MudTooltip>
                        </MudStack>

                        <!-- Data Grid - takes remaining space -->
                        <div style="flex: 1; min-height: 0;">
                            <MudDataGrid T="PresetDescriptor"
                                         @ref="dataGrid"
                                         Hover="true" 
                                         Striped="true" 
                                         Dense="true"
                                         FixedHeader="true"
                                         Height="65vh"
                                         RowsPerPage="25"
                                         ServerData="@LoadServerData"
                                         Filterable="true"
                                         FilterMode="DataGridFilterMode.Simple"
                                         Virtualize
                                         Class="preset-datagrid"
                                         SortMode="SortMode.Multiple"                                         
                                         CurrentPageChanged="OnPageChanged">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">@CategoryName Presets (@totalCount)</MudText>
                                    <MudSpacer />
                                </ToolBarContent>
                                <Columns>
                                    <PropertyColumn Property="x => x.Vendor" Title="Vendor" Filterable="true">
                                        <CellTemplate>
                                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                @if (!string.IsNullOrEmpty(context.Item.Vendor))
                                                {
                                                    <MudTooltip Text="Filter by this vendor">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                                                       Size="Size.Small" 
                                                                       Color="@Color.Primary"
                                                                       OnClick="@(() => FilterByValue("Vendor", context.Item.Vendor))" />
                                                    </MudTooltip>
                                                }
                                                <MudText>@context.Item.Vendor</MudText>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    <PropertyColumn Property="x => x.ClassId" Title="Plugin Name" Filterable="true">
                                        <CellTemplate>
                                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                @{
                                                    var pluginName = PluginLookupService.GetPluginNameByClassId(context.Item.ClassId);
                                                    var displayText = !string.IsNullOrEmpty(pluginName) ? pluginName : context.Item.ClassId;
                                                }
                                                @if (!string.IsNullOrEmpty(displayText))
                                                {
                                                    <MudTooltip Text="Filter by this plugin">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                                                       Size="Size.Small" 
                                                                       Color="@Color.Primary"
                                                                       OnClick="@(() => FilterByValue("ClassId", context.Item.ClassId))" />
                                                    </MudTooltip>
                                                }
                                                <MudText>@displayText</MudText>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    <PropertyColumn Property="x => x.Title" Title="Title" Filterable="true">
                                        <CellTemplate>
                                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                @if (!string.IsNullOrEmpty(context.Item.Title))
                                                {
                                                    <MudTooltip Text="Filter by this title">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                                                       Size="Size.Small" 
                                                                       Color="@Color.Primary"
                                                                       OnClick="@(() => FilterByValue("Title", context.Item.Title))" />
                                                    </MudTooltip>
                                                }
                                                <MudText>@context.Item.Title</MudText>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    <PropertyColumn Property="x => x.Creator" Title="Creator" Filterable="true">
                                        <CellTemplate>
                                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                @if (!string.IsNullOrEmpty(context.Item.Creator))
                                                {
                                                    <MudTooltip Text="Filter by this creator">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                                                       Size="Size.Small" 
                                                                       Color="@Color.Primary"
                                                                       OnClick="@(() => FilterByValue("Creator", context.Item.Creator))" />
                                                    </MudTooltip>
                                                }
                                                <MudText>@context.Item.Creator</MudText>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    <PropertyColumn Property="x => x.SubFolder" Title="SubFolder" Filterable="true">
                                        <CellTemplate>
                                            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                                                @if (!string.IsNullOrEmpty(context.Item.SubFolder))
                                                {
                                                    <MudTooltip Text="Filter by this subfolder">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Search"
                                                                       Size="Size.Small"
                                                                       Color="@Color.Primary"
                                                                       OnClick="@(() => FilterByValue("SubFolder", context.Item.SubFolder))" />
                                                    </MudTooltip>
                                                }
                                                <MudText>@context.Item.SubFolder</MudText>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    @if (CategoryName != "MusicEffect" && CategoryName != "PatternBank")
                                    {
                                        <TemplateColumn Title="Macro" Groupable="false" Width="80">
                                            <CellTemplate>
                                                <MudTooltip Text="Create Studio One Macro">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                                                   Size="Size.Small"
                                                                   Color="@Color.Success"
                                                                   OnClick="@(() => CreateMacro(context.Item))" />
                                                </MudTooltip>
                                            </CellTemplate>
                                        </TemplateColumn>
                                    }
                                </Columns>
                                <PagerContent>
                                    <MudDataGridPager T="PresetDescriptor"  PageSizeOptions="new int[] { 10, 25, 50, 100 }"/>
                                </PagerContent>
                                <NoRecordsContent>
                                    <MudText>No @CategoryName presets found matching your criteria.</MudText>
                                </NoRecordsContent>
                            </MudDataGrid>
                        </div>
                    </div>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string CategoryName { get; set; } = "";
    
    private string searchString = "";
    private bool isLoading = true;
    private string? errorMessage;
    private System.Threading.Timer? searchTimer;
    private MudDataGrid<PresetDescriptor>? dataGrid;
    private int totalCount = 0;
    private string? _lastLoadedCategory;
    private int currentPageIndex = 0;
    private string? _activeFilter = null;
    private string? _filterValue = null;

    protected override async Task OnInitializedAsync()
    {
        // Load plugin mappings for ClassID to Plugin Name lookup
        await PluginLookupService.LoadPluginMappingsAsync();
        await LoadPresetsForCategory();
        _lastLoadedCategory = CategoryName;
    }

    protected override async Task OnParametersSetAsync()
    {
        // Reload data when CategoryName parameter changes
        if (!string.IsNullOrEmpty(CategoryName) && CategoryName != _lastLoadedCategory)
        {
            // Reset search when category changes
            searchString = "";
            await LoadPresetsForCategory();
            
            // Reload the data grid to show new category data
            if (dataGrid != null)
            {
                await dataGrid.ReloadServerData();
            }
            
            _lastLoadedCategory = CategoryName;
        }
    }

    private async Task LoadPresetsForCategory()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(CategoryName))
            {
                errorMessage = "Category name is required.";
                return;
            }

            // Get total count for the category without loading all data
            var categoryPresets = await DatabaseService.LoadPresetsByCategoryFromStorageAsync(CategoryName);
            
            if (categoryPresets == null || !categoryPresets.Any())
            {
                errorMessage = $"No {CategoryName} presets found. Please import your Studio One database first.";
                return;
            }

            totalCount = categoryPresets.Count;
            Snackbar.Add($"Found {totalCount} {CategoryName} presets", Severity.Success);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading {CategoryName} presets: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchChanged(KeyboardEventArgs e)
    {
        // If search string is cleared, clear the button filter too
        if (string.IsNullOrEmpty(searchString))
        {
            _activeFilter = null;
            _filterValue = null;
        }
        
        // Debounce the search to avoid excessive filtering
        searchTimer?.Dispose();
        searchTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                // Reset to page 1 when searching and reload DataGrid
                currentPageIndex = 0;
                if (dataGrid != null)
                {
                    await dataGrid.ReloadServerData();
                }
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void FilterByValue(string filterType, string? value)
    {
        _activeFilter = filterType;
        _filterValue = value;
        searchString = value; // Set the search string so user can see what they're filtering by
        
        // Reset to page 1 when filtering and reload DataGrid
        currentPageIndex = 0;
        if (dataGrid != null)
        {
            dataGrid.ReloadServerData();
        }
        StateHasChanged();
    }

    private async Task OnSearchCleared()
    {
        // Reset to page 1 when search is cleared and reload DataGrid
        currentPageIndex = 0;
        if (dataGrid != null)
        {
            await dataGrid.ReloadServerData();
        }
        StateHasChanged();
    }

    private async Task OnSortChanged(GridState<PresetDescriptor> state)
    {
        // Reset to page 1 when sorting and reload DataGrid
        currentPageIndex = 0;
        if (dataGrid != null)
        {
            await dataGrid.ReloadServerData();
        }
    }

    private async Task OnPageChanged(int page)
    {
        // Update our page index when user navigates pages
        currentPageIndex = page;
        if (dataGrid != null)
        {
            await dataGrid.ReloadServerData();
        }
    }

    private async Task ClearFilters()
    {
        // Clear the search string and button filters
        searchString = "";
        _activeFilter = null;
        _filterValue = null;
        await OnSearchCleared();
    }

    /// <summary>Run the javascript "pdfInterop.printPresets" function</summary>
    /// <returns></returns>
    private async Task PrintPage()
    {
        try
        {
            // Check if the JavaScript function exists before calling it
            var isAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.pdfInterop !== 'undefined' && typeof window.pdfInterop.printPresets === 'function'");
            
            if (isAvailable)
            {
                // Load all presets for the category to export
                var allPresets = await DatabaseService.LoadPresetsByCategoryFromStorageAsync(CategoryName);
                
                if (allPresets == null || !allPresets.Any())
                {
                    Snackbar.Add("No data to export", Severity.Warning);
                    return;
                }

                // Apply search filter if needed
                var presetsToExport = string.IsNullOrWhiteSpace(searchString) && string.IsNullOrWhiteSpace(_activeFilter)
                    ? allPresets 
                    : DatabaseService.FilterPresets(allPresets, searchString, _activeFilter, _filterValue);

                await JSRuntime.InvokeVoidAsync("pdfInterop.printPresets", presetsToExport, CategoryName);
                Snackbar.Add("PDF generated successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("PDF functionality not available. Please refresh the page.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating PDF: {ex.Message}", Severity.Error);
        }
    }

    // DataGrid server-side data loading with optimized pagination and sorting
    private async Task<GridData<PresetDescriptor>> LoadServerData(GridState<PresetDescriptor> state)
    {
        try
        {
            // Force page size to 25 if it's not set correctly
            var pageSize = state.PageSize > 0 ? state.PageSize : 25;
            
            // Use our controlled page index instead of state.Page
            var pageToLoad = currentPageIndex;
            
            // Extract sorting information from GridState
            string? sortBy = null;
            bool sortAscending = true;
            
            if (state.SortDefinitions != null && state.SortDefinitions.Any())
            {
                var sortDefinition = state.SortDefinitions.First();
                sortBy = sortDefinition.SortBy;
                sortAscending = sortDefinition.Descending == false;
            }
            
            // Use the optimized pagination method that loads only the needed data
            var result = await DatabaseService.LoadPresetsByCategoryPaginatedAsync(
                CategoryName, 
                pageToLoad, 
                pageSize, 
                searchString,
                sortBy,
                sortAscending,
                _activeFilter,
                _filterValue);

            return new GridData<PresetDescriptor> 
            { 
                Items = result.Items, 
                TotalItems = result.TotalCount 
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading server data: {ex.Message}");
            return new GridData<PresetDescriptor> { Items = new List<PresetDescriptor>(), TotalItems = 0 };
        }
    }

    private async Task ShowHelp()
    {
        var parameters = new DialogParameters<PresetCategoryHelpDialog>
        {
            { x => x.CategoryName, CategoryName }
        };

        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        await DialogService.ShowAsync<PresetCategoryHelpDialog>("Help", parameters, options);
    }

    private void NavigateToPresets()
    {
        Navigation.NavigateTo("/");
    }

    private async Task CreateMacro(PresetDescriptor preset)
    {
        var isFXChain = CategoryName == "FXChain";
        var isAudioEffect = CategoryName == "AudioEffect";
        var isAudioSynth = CategoryName == "AudioSynth";
        var isTrackPreset = CategoryName == "TrackPreset";
        
        var parameters = new DialogParameters<MacroTitleDialog>
        {
            { x => x.PluginName, preset.Title ?? "Unknown Preset" },
            { x => x.ClassId, preset.ClassId },
            { x => x.Category, CategoryName },
            { x => x.IsFXChain, isFXChain },
            { x => x.PresetTitle, preset.Title }
        };

        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<MacroTitleDialog>("Create Studio One Macro", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is not null)
        {
            if (result.Data is { } data)
            {
                var title = data.GetType().GetProperty("Title")?.GetValue(data)?.ToString() ?? "";
                var group = data.GetType().GetProperty("Group")?.GetValue(data)?.ToString() ?? "369";
                var description = data.GetType().GetProperty("Description")?.GetValue(data)?.ToString();
                var modeProperty = data.GetType().GetProperty("Mode");
                var mode = modeProperty?.GetValue(data) as int? ?? 0;

                if (!string.IsNullOrEmpty(title))
                {
                    if (isFXChain)
                    {
                        await MacroService.GenerateAndDownloadMacroAsync(preset, title, group, description, mode);
                    }
                    else if (isAudioEffect || isAudioSynth || isTrackPreset)
                    {
                        // For AudioEffect, AudioSynth, and TrackPreset presets, generate macro with preset already selected
                        await MacroService.GenerateAndDownloadMacroAsync(preset, title, group, description);
                    }
                    else
                    {
                        Snackbar.Add("Macro generation for this preset type is not yet implemented", Severity.Warning);
                    }
                }
            }
        }
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
