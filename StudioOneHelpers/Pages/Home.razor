@page "/"
@using Microsoft.AspNetCore.Components.Web
@using Blazored.LocalStorage
@using StudioOneHelpers.Services
@using StudioOneHelpers.Pages.Shared
@using StudioOneHelpers.Pages.Shared.Dialogs
@using StudioOneHelpers.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using MudBlazor
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject DatabaseProcessingService DatabaseService
@inject PluginProcessingService PluginService
@inject CommandsProcessingService CommandsService
@inject MacroGenerationService MacroService
@inject PluginLookupService PluginLookupService
@inject NavigationService NavigationService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService


<PageTitle>S1 Helpers Dashboard</PageTitle>

<MudContainer Class="mt-4" MaxWidth="MaxWidth.False">
    @if (CurrentView == ViewType.Dashboard)
    {
        <MudGrid Justify="Justify.Center" Spacing="3">
            <!-- Header -->
            <MudItem xs=12 sm="10" md="8" lg="8">
                <MudPaper Elevation="4" Class="pa-4 text-center dashboard-header" Style="color: white; border-radius: 12px; position: relative;">
                    <MudStack Row AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Spacing="2">
                        <MudText Typo="Typo.h4" Style="font-weight: 700; margin-bottom: 4px; color: white; text-shadow: 0 1px 3px rgba(0,0,0,0.3);">
                            🎵 Studio One Helpers
                        </MudText>                    
                    </MudStack>
                    <MudText Typo="Typo.body2" Style="opacity: 0.9; font-weight: 400;">
                        Tools for studio one commands, macros, plugins and presets
                    </MudText>
                </MudPaper>
            </MudItem>

            <!-- Cards Container -->
            <MudItem xs="12">
                <MudGrid Spacing="3" Justify="Justify.Center">
                <!-- Commands & Macros Card -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="8" Class="pa-6 dashboard-card" Style="height: 100%; border-radius: 16px;">
                        <MudCardContent Class="text-center d-flex flex-column" Style="height: 100%;">
                            <!-- Header Section -->
                            <div class="card-header">
                                <MudStack Row>
                                    <MudIcon Icon="@Icons.Material.Filled.Keyboard" Size="Size.Large" Color="Color.Primary" Style="margin-bottom: 20px; filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));" />
                                    <MudText Typo="Typo.h5" Style="font-weight: 700; margin-bottom: 12px; color: #2c3e50;">
                                        Commands & Macros
                                    </MudText>
                                </MudStack>
                                <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 8px; font-weight: 500;">
                                    ShortcutsExport.html
                                </MudText>
                                <MudText Typo="Typo.body2" Style="color: #5a6c7d; margin-bottom: 20px; line-height: 1.5;">
                                    Import your Studio One keyboard exported shortcuts to filter commands, macros and print to PDF
                                </MudText>
                            </div>
                            
                            <!-- Status Section -->
                            <div class="card-status flex-grow-1 d-flex flex-column justify-content-center">
                                @if (commandsDataStatus != null)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small" Class="mb-3 status-chip" T="string" Style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);">
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" />
                                        Data Available
                                    </MudChip>
                                    <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 16px; font-weight: 500;">
                                        📅 Imported: @commandsDataStatus
                                    </MudText>
                                }
                                else
                                {
                                    <MudChip Color="Color.Warning" Size="Size.Small" Class="mb-3 status-chip" T="string" Style="background: linear-gradient(135deg, #FF9800, #F57C00); color: white; box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="mr-1" />
                                        No Data
                                    </MudChip>
                                    <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 16px; font-weight: 500;">
                                        📝 Export from Studio One → File → Export → Keyboard Shortcuts
                                    </MudText>
                                }
                            </div>
                            
                            <!-- Buttons Section -->
                            <div class="card-buttons mt-auto">
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           Size="Size.Medium" 
                                           StartIcon="@(isCommandsLoading ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Upload)"
                                           OnClick="HandleCommandsImport"
                                           Disabled="@isCommandsLoading"
                                           Class="mb-3 modern-button w-100"
                                           Style="background: linear-gradient(135deg, #667eea, #764ba2); border: none; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);">
                                    @(isCommandsLoading ? "Importing..." : "Import Commands")
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Primary" 
                                           Size="Size.Medium" 
                                           StartIcon="@Icons.Material.Filled.ArrowForward"
                                           OnClick="NavigateToCommands"
                                           Disabled="@(commandsDataStatus == null)"
                                           Class="modern-button w-100"
                                           Style="border: 2px solid #667eea; color: #667eea; font-weight: 600;">
                                    View
                                </MudButton>
                            </div>
                            
                            <!-- Hidden file input -->
                            <InputFile OnChange="OnCommandsFileSelected" 
                                       accept=".html" 
                                       style="display: none;" 
                                       id="commandsFileInput"
                                       @ref="commandsFileInput" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Plugins Card -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="8" Class="pa-6 dashboard-card" Style="height: 100%; border-radius: 16px;">
                        <MudCardContent Class="text-center d-flex flex-column" Style="height: 100%;">
                            <!-- Header Section -->
                            <div class="card-header">
                                <MudStack Row>
                                    <MudIcon Icon="@Icons.Material.Filled.Extension" Size="Size.Large" Color="Color.Secondary" Style="margin-bottom: 20px; filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));" />
                                    <MudText Typo="Typo.h5" Style="font-weight: 700; margin-bottom: 12px; color: #2c3e50;">
                                        Studio One Plugins
                                    </MudText>
                                </MudStack>
                                <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 8px; font-weight: 500;">
                                    Plugins-en.settings
                                </MudText>
                                <MudText Typo="Typo.body2" Style="color: #5a6c7d; margin-bottom: 20px; line-height: 1.5;">
                                    Import Studio One plugin settings and generate macros
                                </MudText>
                            </div>
                            
                            <!-- Status Section -->
                            <div class="card-status flex-grow-1 d-flex flex-column justify-content-center">
                                @if (pluginsDataStatus != null)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small" Class="mb-3 status-chip" T="string" Style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);">
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" />
                                        Data Available
                                    </MudChip>
                                    <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 16px; font-weight: 500;">
                                        📅 Imported: @pluginsDataStatus
                                    </MudText>
                                }
                                else
                                {
                                    <MudChip Color="Color.Warning" Size="Size.Small" Class="mb-3 status-chip" T="string" Style="background: linear-gradient(135deg, #FF9800, #F57C00); color: white; box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="mr-1" />
                                        No Data
                                    </MudChip>
                                    <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 16px; font-weight: 500;">
                                        📁 Find: %AppData%\PreSonus\Studio One 6\Settings\Plugins-en.settings
                                    </MudText>
                                }
                            </div>
                            
                            <!-- Buttons Section -->
                            <div class="card-buttons mt-auto">
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Secondary" 
                                           Size="Size.Medium" 
                                           StartIcon="@(isPluginsLoading ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Upload)"
                                           OnClick="HandlePluginsImport"
                                           Disabled="@isPluginsLoading"
                                           Class="mb-3 modern-button w-100"
                                           Style="background: linear-gradient(135deg, #9C27B0, #7B1FA2); border: none; box-shadow: 0 4px 15px rgba(156, 39, 176, 0.4);">
                                    @(isPluginsLoading ? "Importing..." : "Import Plugins")
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Secondary" 
                                           Size="Size.Medium" 
                                           StartIcon="@Icons.Material.Filled.ArrowForward"
                                           OnClick="NavigateToPlugins"
                                           Disabled="@(pluginsDataStatus == null)"
                                           Class="modern-button w-100"
                                           Style="border: 2px solid #9C27B0; color: #9C27B0; font-weight: 600;">
                                    View
                                </MudButton>
                            </div>
                            
                            <!-- Hidden file input -->
                            <InputFile OnChange="OnPluginsFileSelected" 
                                       accept=".settings"
                                       style="display: none;" 
                                       id="pluginsFileInput"
                                       @ref="pluginsFileInput" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Presets Card -->
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="8" Class="pa-6 dashboard-card" Style="height: 100%; border-radius: 16px;">
                        <MudCardContent Class="text-center d-flex flex-column" Style="height: 100%;">
                            <!-- Header Section -->
                            <div class="card-header">
                                <MudStack Row>
                                    <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Large" Color="Color.Tertiary" Style="margin-bottom: 20px; filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));" />
                                    <MudText Typo="Typo.h5" Style="font-weight: 700; margin-bottom: 12px; color: #2c3e50;">
                                        Studio One Presets
                                    </MudText>
                                </MudStack>
                                <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 8px; font-weight: 500;">
                                    DataStore.db
                                </MudText>
                                <MudText Typo="Typo.body2" Style="color: #5a6c7d; margin-bottom: 20px; line-height: 1.5;">
                                    Import Studio One presets and explore categories
                                </MudText>
                            </div>
                            
                            <!-- Category Navigation Menu (above status) -->
                            @if (availableCategories.Any())
                            {
                                <div class="mb-3">
                                    <MudMenu StartIcon="@Icons.Material.Filled.Folder"
                                             Color="Color.Tertiary" 
                                             Variant="Variant.Outlined"
                                             Size="Size.Small"
                                             AnchorOrigin="Origin.BottomLeft"
                                             TransformOrigin="Origin.TopLeft"
                                             Style="width: 100%;"
                                             FullWidth
                                             Label="Preset Categories">
                                        
                                        @foreach (var category in availableCategories)
                                        {
                                            <MudMenuItem OnClick="@(() => NavigateToPresetCategory(category))" 
                                                         Icon="@Icons.Material.Filled.Folder">
                                                @category
                                            </MudMenuItem>
                                        }
                                    </MudMenu>
                                </div>
                            }
                            
                            <!-- Status Section -->
                            <div class="card-status flex-grow-1 d-flex flex-column justify-content-center">
                                @if (presetsDataStatus != null)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small" Class="mb-3 status-chip" T="string" Style="background: linear-gradient(135deg, #4CAF50, #45a049); color: white; box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);">
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" />
                                        Data Available
                                    </MudChip>
                                    <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 16px; font-weight: 500;">
                                        📅 Imported: @presetsDataStatus
                                    </MudText>
                                }
                                else
                                {
                                    <MudChip Color="Color.Warning" Size="Size.Small" Class="mb-3 status-chip" T="string" Style="background: linear-gradient(135deg, #FF9800, #F57C00); color: white; box-shadow: 0 2px 8px rgba(255, 152, 0, 0.3);">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="mr-1" />
                                        No Data
                                    </MudChip>
                                    <MudText Typo="Typo.caption" Style="color: #7f8c8d; margin-bottom: 16px; font-weight: 500;">
                                        📁 Find: %AppData%\PreSonus\Studio One 6\DataStore.db
                                    </MudText>
                                }
                            </div>
                            
                            <!-- Buttons Section -->
                            <div class="card-buttons mt-auto">
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Tertiary" 
                                           Size="Size.Medium" 
                                           StartIcon="@(isPresetsLoading ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Upload)"
                                           OnClick="HandlePresetsImport"
                                           Disabled="@isPresetsLoading"
                                           Class="mb-3 modern-button w-100"
                                           Style="background: linear-gradient(135deg, #FF5722, #E64A19); border: none; box-shadow: 0 4px 15px rgba(255, 87, 34, 0.4);">
                                    @(isPresetsLoading ? "Importing..." : "Import Presets")
                                </MudButton>
                                
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Tertiary" 
                                           Size="Size.Medium" 
                                           StartIcon="@Icons.Material.Filled.ArrowForward"
                                           OnClick="@(() => NavigateToPresetCategory("All"))"
                                           Disabled="@(presetsDataStatus == null)"
                                           Class="modern-button w-100"
                                           Style="border: 2px solid #FF5722; color: #FF5722; font-weight: 600;">
                                    View All
                                </MudButton>
                            </div>
                            
                            <!-- Hidden file input -->
                            <InputFile OnChange="OnPresetsFileSelected" 
                                       accept=".db" 
                                       style="display: none;" 
                                       id="presetsFileInput"
                                       @ref="presetsFileInput" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- Clear Data Section -->
        <MudItem xs=12 sm="10" md="8" lg="8">
            <MudPaper Elevation="4" Class="pa-4 clear-section" Style="color: white; border-radius: 12px; position: relative;">
                <MudStack Row AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Spacing="3" Class="ml-6" Style="right: -160px;position: relative;">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                        <MudSpacer/>
                        <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Medium" Class="ml-16" 
                            Style="filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));" />
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h6" Style="font-weight: 700; text-shadow: 0 1px 2px rgba(0,0,0,0.3);">
                                Clear All Data
                            </MudText>
                            <MudText Typo="Typo.caption" Style="opacity: 0.9; font-weight: 400;">
                                Remove all imported data from browser storage
                            </MudText>
                        </MudStack>
                    </MudStack>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Error"                                
                               Size="Size.Medium"
                               StartIcon="@Icons.Material.Filled.DeleteForever"
                               OnClick="ClearAllData"
                               Class="modern-button"
                               Style="background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); font-weight: 600;">
                        Clear
                    </MudButton>
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
    }
    else if (CurrentView == ViewType.Commands)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-1" Style="height: 100%">
                    <CascadingValue Value="LocalStorage">
                        <CommandsMacrosComponent />
                    </CascadingValue>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else if (CurrentView == ViewType.Plugins)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-1" Style="height: 100%">
                    <CascadingValue Value="LocalStorage">
                        <PluginsComponent />
                    </CascadingValue>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else if (CurrentView == ViewType.Presets)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-1" Style="height: 100%">
                    <PresetCategoryView CategoryName="@SelectedPresetCategory" />
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else if (CurrentView == ViewType.Guide)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-1" Style="height: 100%">
                    <GuideContent />
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    // View state management
    public enum ViewType { Dashboard, Commands, Plugins, Presets, Guide }
    public ViewType CurrentView { get; set; } = ViewType.Dashboard;
    public string? SelectedPresetCategory { get; set; }

    // File input references
    private InputFile? commandsFileInput;
    private InputFile? pluginsFileInput;
    private InputFile? presetsFileInput;
    
    // Data status indicators
    private string? commandsDataStatus;
    private string? pluginsDataStatus;
    private string? presetsDataStatus;
    
    // Loading states
    private bool isCommandsLoading = false;
    private bool isPluginsLoading = false;
    private bool isPresetsLoading = false;
    
    // Available preset categories
    private List<string> availableCategories = new();

    protected override async Task OnInitializedAsync()
    {
        NavigationService.RegisterHomeComponent(this);
        await CheckDataStatus();
    }

    private async Task CheckDataStatus()
    {
        // Check commands data
        commandsDataStatus = await CommandsService.HasCommandsDataAsync() ? 
            await CommandsService.GetCommandsImportTimeAsync() : null;

        // Check plugins data
        var pluginsData = await LocalStorage.GetItemAsync<string>("PluginsData");
        pluginsDataStatus = !string.IsNullOrEmpty(pluginsData) ? 
            await GetDataImportTime("PluginsData") : null;

        // Check presets data - use the same logic as DatabaseProcessingService
        availableCategories = await DatabaseService.LoadAvailableCategoriesFromStorageAsync();
        presetsDataStatus = availableCategories.Any() ? 
            await GetDataImportTime("PresetData") : null;
    }

    private async Task<string> GetDataImportTime(string key)
    {
        var importTime = await LocalStorage.GetItemAsync<string>($"{key}_ImportTime");
        if (!string.IsNullOrEmpty(importTime))
        {
            if (DateTime.TryParse(importTime, out var dateTime))
            {
                return dateTime.ToString("MMM dd, yyyy HH:mm");
            }
        }
        return "Unknown";
    }

    public void NavigateToCommands()
    {
        if (commandsDataStatus == null)
        {
            Snackbar.Add("No commands data available. Please import your ShortcutsExport.html file first.", Severity.Warning);
            return;
        }
        CurrentView = ViewType.Commands;
        StateHasChanged();
    }

    public void NavigateToPlugins()
    {
        if (pluginsDataStatus == null)
        {
            Snackbar.Add("No plugins data available. Please import your Plugins-en.settings file first.", Severity.Warning);
            return;
        }
        CurrentView = ViewType.Plugins;
        StateHasChanged();
    }

    public void NavigateToPresetCategory(string category)
    {
        if (presetsDataStatus == null)
        {
            Snackbar.Add("No presets data available. Please import your DataStore.db file first.", Severity.Warning);
            return;
        }
        
        if (category == "All")
        {
            // Show all available categories - navigate to the first available category
            if (availableCategories.Any())
            {
                SelectedPresetCategory = availableCategories.First();
                CurrentView = ViewType.Presets;
            }
        }
        else
        {
            SelectedPresetCategory = category;
            CurrentView = ViewType.Presets;
        }
        StateHasChanged();
    }

    public void NavigateToDashboard()
    {
        CurrentView = ViewType.Dashboard;
        StateHasChanged();
    }

    public void NavigateToGuide()
    {
        CurrentView = ViewType.Guide;
        StateHasChanged();
    }

    // Commands import handlers
    private async Task HandleCommandsImport()
    {
        await JSRuntime.InvokeVoidAsync("clickFileInput", "commandsFileInput");
    }

    private async Task OnCommandsFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;

        isCommandsLoading = true;
        StateHasChanged();

        try
        {
            using var stream = e.File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            using var reader = new StreamReader(stream);
            var htmlContent = await reader.ReadToEndAsync();

            // Process the HTML content to extract commands
            var commands = await CommandsService.ProcessCommandsAsync(htmlContent);
            
            // Save to storage
            await CommandsService.SaveCommandsToStorageAsync(commands);

            Snackbar.Add($"Commands data imported successfully! Found {commands.Count} commands.", Severity.Success);
            await CheckDataStatus();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing commands: {ex.Message}", Severity.Error);
        }
        finally
        {
            isCommandsLoading = false;
            StateHasChanged();
        }
    }

    // Plugins import handlers
    private async Task HandlePluginsImport()
    {
        await JSRuntime.InvokeVoidAsync("clickFileInput", "pluginsFileInput");
    }

    private async Task OnPluginsFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;

        isPluginsLoading = true;
        StateHasChanged();

        try
        {
            using var stream = e.File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            using var reader = new StreamReader(stream);
            var xmlContent = await reader.ReadToEndAsync();

            // Process plugins using the service
            var plugins = await PluginService.ProcessPluginsAsync(xmlContent);
            await LocalStorage.SetItemAsync("PluginsData_ImportTime", DateTime.Now.ToString());

            Snackbar.Add($"Plugins data imported successfully! Found {plugins.Count} plugins.", Severity.Success);
            await CheckDataStatus();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing plugins: {ex.Message}", Severity.Error);
        }
        finally
        {
            isPluginsLoading = false;
            StateHasChanged();
        }
    }

    // Presets import handlers
    private async Task HandlePresetsImport()
    {
        await JSRuntime.InvokeVoidAsync("clickFileInput", "presetsFileInput");
    }

    private async Task OnPresetsFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;

        isPresetsLoading = true;
        StateHasChanged();

        try
        {
            using var stream = e.File.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024); // 50MB limit for database files
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray();

            // Process database using the service
            var presets = await DatabaseService.ProcessDatabaseAsync(fileBytes);
            await LocalStorage.SetItemAsync("PresetData_ImportTime", DateTime.Now.ToString());

            Snackbar.Add($"Presets data imported successfully! Found {presets.Count} presets.", Severity.Success);
            await CheckDataStatus();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error importing presets: {ex.Message}", Severity.Error);
        }
        finally
        {
            isPresetsLoading = false;
            StateHasChanged();
        }
    }


    private async Task ClearAllData()
    {
        try
        {
            // Clear all localStorage data
            await JSRuntime.InvokeVoidAsync("clearAllLocalStorageData");
            
            // Reset status indicators
            commandsDataStatus = null;
            pluginsDataStatus = null;
            presetsDataStatus = null;
            
            Snackbar.Add("All imported data has been cleared successfully!", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error clearing data: {ex.Message}", Severity.Error);
        }
    }
}