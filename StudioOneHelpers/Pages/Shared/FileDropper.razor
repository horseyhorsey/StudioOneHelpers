@using System.Text
@inject ISnackbar Snackbar

<style>
    .file-upload-input {        
        width: 80%;
        height: 10%;
        overflow: hidden;        
        opacity: 0;
    }
</style>

<MudToolBar Style="width: 100%;" Dense Gutters=false>
    @* <MudSpacer/> *@
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="@_fileUpload"
                   OnFilesChanged="@OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="file-upload-input"    
                   Accept="@Accept"
                   MaximumFileCount=@MaxFileCount
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="100%"
                      Outlined="true"
                      Class="@($"{_dragClass}")">
                <MudText Typo="Typo.subtitle2" Class="Info">
                    @HelperText
                </MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    @* <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>
    </MudToolBar> *@
</MudToolBar>
@code {
    #nullable enable

    /// <summary>Which files to accept.  MAUI-ANDROID: You should use Accept="image/png, image/jpg" rather than Accept=".png, .jpg"</summary>
    [Parameter] public string? Accept { get; set; }
    [Parameter] public string? HelperText { get; set; } = "Drag and drop files here or click";
    [Parameter] public int MaxFileCount { get; set; } = 1;    
    [Parameter] public EventCallback<IReadOnlyList<IBrowserFile>> OnFilesChanged { get; set; }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-1 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();

        if (OnFilesChanged.HasDelegate)
            await OnFilesChanged.InvokeAsync(files);
        else
        {
            
        }
        // foreach (var file in files)
        // {
        //     Console.WriteLine($"File name: {file.Name}, size: {file.Size}, content type: {file.ContentType}");
        //     _fileNames.Add(file.Name);          
        // }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}