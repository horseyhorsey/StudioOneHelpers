@using Blazored.LocalStorage
@using StudioOneHelpers.Models
@using StudioOneHelpers.Pages.Shared.Dialogs
@using StudioOneHelpers.Services
@inject StickerLayoutService StickerService
@inject CommandsProcessingService CommandsService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog @bind-IsVisible="_isVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h5" Style="font-weight:bold">Controller Sticker Designer</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="mt-2 px-8" MaxWidth="MaxWidth.False">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4">
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                            <MudText Typo="Typo.h6" Style="font-weight:bold">Controller Layout Designer</MudText>
                            <MudSpacer />
                            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                                <MudButton StartIcon="@Icons.Material.Filled.Save" OnClick="@SaveLayoutAsync">Save Layout</MudButton>
                                <MudButton StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="@PrintStickersAsync" Color="Color.Error">Export PDF</MudButton>
                                <MudButton StartIcon="@Icons.Material.Filled.Refresh" OnClick="@ResetLayoutAsync" Color="Color.Warning">Reset</MudButton>
                            </MudButtonGroup>
                        </MudStack>
                        
                        <!-- PDF Export Size Settings -->
                        <MudPaper Elevation="1" Class="pa-3 mb-4" Style="background-color: #f5f5f5;">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                <MudText Typo="Typo.subtitle2" Style="font-weight:bold">PDF Export Size:</MudText>
                                <MudTextField @bind-Value="_buttonWidth" Label="Width" Type="InputType.Number" Style="width: 80px" />
                                <MudTextField @bind-Value="_buttonHeight" Label="Height" Type="InputType.Number" Style="width: 80px" />
                                <MudSelect @bind-Value="_sizeUnit" Label="Unit" T="string" Style="width: 80px">
                                    <MudSelectItem Value="@("mm")">mm</MudSelectItem>
                                    <MudSelectItem Value="@("cm")">cm</MudSelectItem>
                                </MudSelect>
                                <MudButton OnClick="@SaveSizePreferencesAsync" Color="Color.Primary" Size="Size.Small">Save Size</MudButton>
                                <MudText Typo="Typo.caption" Style="color: #666;">
                                    Current: @_buttonWidth x @_buttonHeight @_sizeUnit
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    </MudPaper>
                </MudItem>

        <MudItem xs="8">
            <!-- Grid Designer -->
            <MudPaper Elevation="1" Class="pa-4">
                <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                    <MudText Typo="Typo.h6">Controller Layout</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_gridRows" Label="Rows" Type="InputType.Number" Style="width: 80px" />
                    <MudTextField @bind-Value="_gridColumns" Label="Columns" Type="InputType.Number" Style="width: 80px" />
                    <MudButton OnClick="@UpdateGridSize" Color="Color.Primary" Size="Size.Small">Update Grid</MudButton>
                </MudStack>

                <!-- Grid Display -->
                <div style="display: grid; grid-template-columns: repeat(@_gridColumns, 1fr); gap: 4px; max-width: 600px;">
                    @for (int row = 0; row < _gridRows; row++)
                    {
                        @for (int col = 0; col < _gridColumns; col++)
                        {
                            var button = _buttons.FirstOrDefault(b => b.Row == row && b.Column == col);
                            <div style="width: 80px; height: 60px; border: 2px solid #ccc; border-radius: @(button?.Shape == "circle" ? "50%" : "4px"); background-color: @(button?.Color ?? "#f5f5f5"); display: flex; align-items: center; justify-content: center; cursor: pointer; position: relative;"
                                 class="@(_selectedButtonRow == row && _selectedButtonCol == col ? "selected-button" : "")">
                                
                                @if (_selectedButtonRow == row && _selectedButtonCol == col)
                                {
                                    <!-- Show command selector when button is selected -->
                                    <MudSelect @bind-Value="_selectedCommand" 
                                              @bind-Value:after="OnCommandSelected"
                                              T="string" 
                                              Label="Select Command" 
                                              Variant="Variant.Outlined"
                                              Size="Size.Small"
                                              Style="width: 100%; font-size: 8px; z-index: 10;"
                                              AnchorOrigin="Origin.BottomCenter"
                                              TransformOrigin="Origin.TopCenter"
                                              @onclick:stopPropagation="true">
                                                
                                        @if (FilteredCommands?.Any() == true)
                                        {
                                            @foreach (var command in FilteredCommands.Take(20)) // Limit to first 20 for performance
                                            {
                                                <MudSelectItem Value="@command.CommandName">@command.CommandName</MudSelectItem>
                                            }
                                        }
                                    </MudSelect>
                                }
                                else
                                {
                                    <!-- Show button content when not selected -->
                                    @if (button?.IsAssigned == true)
                                    {
                                        <MudText Typo="Typo.caption" Style="color: white; text-align: center; font-size: 10px; line-height: 1.2; padding: 2px;">
                                            @button.AssignedText
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.caption" Style="color: #666; text-align: center; font-size: 10px;">
                                            @button?.ButtonLabel
                                        </MudText>
                                    }
                                    
                                    @if (button?.IsAssigned == true)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                                     Size="Size.Small" 
                                                     Style="position: absolute; top: 2px; right: 2px; color: white; background: rgba(0,0,0,0.3); z-index: 5;"
                                                     OnClick="@(() => ClearButton(row, col))" />
                                    }
                                }
                                
                                <!-- Click handler for the entire button - only when not selected -->
                                @if (_selectedButtonRow != row || _selectedButtonCol != col)
                                {
                                    <div @onclick="@(() => SelectButton(row, col))" 
                                         @oncontextmenu:preventDefault="true" 
                                         @oncontextmenu="@(() => ClearButton(row, col))"
                                         style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: 1; cursor: pointer;"
                                         class="button-overlay">
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>

                <MudText Typo="Typo.caption" Class="mt-2">
                    Click a button to select it and choose a command/macro from the dropdown. Right-click to clear.
                </MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="4">
            <!-- Command/Macro Selector -->
            <MudPaper Elevation="1" Class="pa-4">
                <MudTabs @bind-ActivePanelIndex="_activeTab" Color="Color.Primary" PanelClass="pa-4">
                    <MudTabPanel Text="Commands">
                        <MudTextField @bind-Value="_commandSearch" Placeholder="Search commands..." Adornment="Adornment.Start" 
                                     AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Clearable Class="mb-3" />
                        
                        <MudList Clickable="true" MaxHeight="400px" Style="overflow-y: auto;" T="string">
                            @if (FilteredCommands?.Any() == true)
                            {
                                @foreach (var command in FilteredCommands)
                                {
                                    <MudListItem @onclick="@(() => AssignCommand(command.CommandName))" 
                                               Style="cursor: pointer;">
                                        <MudText Typo="Typo.body2">@command.CommandName</MudText>
                                        <MudText Typo="Typo.caption" Style="color: #666;">@command.SectionName</MudText>
                                    </MudListItem>
                                }
                            }
                            else
                            {
                                <MudListItem>
                                    <MudText Typo="Typo.body2" Style="color: #666;">No commands available. Import commands first.</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    </MudTabPanel>
                    
                    <MudTabPanel Text="Button Settings">
                        @if (_selectedButton != null)
                        {
                            <MudStack Spacing="3">
                                <MudText Typo="Typo.h6">Button @_selectedButton.ButtonLabel</MudText>
                                
                                <MudSelect @bind-Value="_selectedButton.Color" Label="Color" T="string">
                                    @foreach (var color in _availableColors)
                                    {
                                        <MudSelectItem Value="@color.Value">@color.Key</MudSelectItem>
                                    }
                                </MudSelect>
                                
                                <MudSelect @bind-Value="_selectedButton.Shape" Label="Shape" T="string">
                                    <MudSelectItem Value="_selectedButton.Shape">Square</MudSelectItem>
                                    <MudSelectItem Value="_selectedButton.Shape">Circle</MudSelectItem>
                                </MudSelect>
                                
                                <MudTextField @bind-Value="_selectedButton.ButtonLabel" Label="Button Label" />
                                
                                <MudButton OnClick="@UpdateSelectedButton" Color="Color.Primary" FullWidth="true">
                                    Update Button
                                </MudButton>
                            </MudStack>
                        }
                        else
                        {
                            <MudText Typo="Typo.body2" Style="color: #666;">Select a button to configure its settings.</MudText>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .selected-button {
        border-color: #1976d2 !important;
        border-width: 3px !important;
    }
    
    .button-overlay {
        pointer-events: none;
    }
    
    .button-overlay:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }
</style>

@code {
    private List<ControllerButton> _buttons = new();
    private List<CommandItem>? _commands = new();
    private List<CommandItem>? FilteredCommands => _commands?.Where(c => 
        string.IsNullOrWhiteSpace(_commandSearch) || 
        c.CommandName?.Contains(_commandSearch, StringComparison.OrdinalIgnoreCase) == true ||
        c.SectionName?.Contains(_commandSearch, StringComparison.OrdinalIgnoreCase) == true).ToList();
    
    private int _gridRows = 4;
    private int _gridColumns = 4;
    private int _activeTab = 0;
    private string _commandSearch = "";
    private int? _selectedButtonRow;
    private int? _selectedButtonCol;
    private string _selectedCommand = "";
    private ControllerButton? _selectedButton => _selectedButtonRow.HasValue && _selectedButtonCol.HasValue 
        ? _buttons.FirstOrDefault(b => b.Row == _selectedButtonRow && b.Column == _selectedButtonCol)
        : null;
    
    private Dictionary<string, string> _availableColors = new();
    
    // PDF Export Size Settings
    private double _buttonWidth = 20.0;
    private double _buttonHeight = 15.0;
    private string _sizeUnit = "mm";
    
    // Dialog properties
    private bool _isVisible = true;
    private DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.ExtraExtraLarge,
        FullWidth = true,
        FullScreen = true,
        CloseButton = true,
        BackdropClick = false
    };

    protected override async Task OnInitializedAsync()
    {
        _availableColors = StickerService.GetAvailableColors();
        await LoadLayoutAsync();
        await LoadCommandsAsync();
        await LoadSizePreferencesAsync();
    }

    private async Task LoadLayoutAsync()
    {
        var (buttons, rows, columns) = await StickerService.LoadLayoutFromStorageAsync();
        _buttons = buttons;
        _gridRows = rows;
        _gridColumns = columns;
    }

    private async Task LoadCommandsAsync()
    {
        _commands = await CommandsService.LoadCommandsFromStorageAsync();
    }

    private async Task LoadSizePreferencesAsync()
    {
        var (width, height, unit) = await StickerService.LoadButtonSizePreferencesAsync();
        _buttonWidth = width;
        _buttonHeight = height;
        _sizeUnit = unit;
    }

    private async Task SaveSizePreferencesAsync()
    {
        await StickerService.SaveButtonSizePreferencesAsync(_buttonWidth, _buttonHeight, _sizeUnit);
        Snackbar.Add("Button size preferences saved!", Severity.Success);
    }

    private void SelectButton(int row, int col)
    {
        _selectedButtonRow = row;
        _selectedButtonCol = col;
        _selectedCommand = ""; // Reset command selection
        StateHasChanged();
    }

    private void ClearButton(int row, int col)
    {
        var button = _buttons.FirstOrDefault(b => b.Row == row && b.Column == col);
        if (button != null)
        {
            button.AssignedText = null;
            StateHasChanged();
            Snackbar.Add($"Button {button.ButtonLabel} cleared", Severity.Info);
        }
    }

    private async Task AssignCommand(string commandName)
    {
        if (_selectedButton != null)
        {
            _selectedButton.AssignedText = commandName;
            StateHasChanged();
            Snackbar.Add($"Command '{commandName}' assigned to button {_selectedButton.ButtonLabel}", Severity.Success);
        }
    }

    private async Task OnCommandSelected()
    {
        if (!string.IsNullOrEmpty(_selectedCommand))
        {
            await AssignCommand(_selectedCommand);
        }
        else
        {
            // Clear the assignment if "None" is selected
            if (_selectedButton != null)
            {
                _selectedButton.AssignedText = null;
                StateHasChanged();
                Snackbar.Add($"Command cleared from button {_selectedButton.ButtonLabel}", Severity.Info);
            }
        }
        
        // Deselect the button after assignment
        _selectedButtonRow = null;
        _selectedButtonCol = null;
        _selectedCommand = "";
        StateHasChanged();
    }

    private async Task ShowCommandSelectionDialog()
    {
        if (_selectedButton == null) return;

        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            BackdropClick = true
        };

        var parameters = new DialogParameters<CommandSelectionDialog>
        {
            { x => x.Commands, _commands ?? new List<CommandItem>() },
            { x => x.SelectedButton, _selectedButton }
        };

        var dialog = await DialogService.ShowAsync<CommandSelectionDialog>("Select Command/Macro", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string selectedCommand)
        {
            await AssignCommand(selectedCommand);
        }
    }

    private void UpdateSelectedButton()
    {
        // Button is already updated through binding
        StateHasChanged();
    }

    private async Task UpdateGridSize()
    {
        _buttons = StickerService.CreateDefaultLayout(_gridRows, _gridColumns);
        _selectedButtonRow = null;
        _selectedButtonCol = null;
        await SaveLayoutAsync();
    }

    private async Task SaveLayoutAsync()
    {
        await StickerService.SaveLayoutToStorageAsync(_buttons, _gridRows, _gridColumns);
        Snackbar.Add("Layout saved successfully!", Severity.Success);
    }

    private async Task ResetLayoutAsync()
    {
        _buttons = StickerService.CreateDefaultLayout(_gridRows, _gridColumns);
        _selectedButtonRow = null;
        _selectedButtonCol = null;
        await SaveLayoutAsync();
        Snackbar.Add("Layout reset!", Severity.Info);
    }

    private async Task PrintStickersAsync()
    {
        try
        {
            var isAvailable = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.pdfInterop !== 'undefined' && typeof window.pdfInterop.printStickers === 'function'");
            
            if (isAvailable)
            {
                await JSRuntime.InvokeVoidAsync("pdfInterop.printStickers", _buttons, _gridRows, _gridColumns, _buttonWidth, _buttonHeight, _sizeUnit);
                Snackbar.Add("Sticker PDF generated successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("PDF functionality not available. Please refresh the page.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating PDF: {ex.Message}", Severity.Error);
        }
    }

    private void CloseDialog()
    {
        _isVisible = false;
    }
}
